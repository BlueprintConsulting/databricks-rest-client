/*
 * Jobs API 2.1
 * The Jobs API allows you to create, edit, and delete jobs.
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.edmunds.rest.databricks.DTO.libraries;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.Objects;

/**
 * LibraryDTO
 */
@JsonPropertyOrder({
  LibraryDTO.JSON_PROPERTY_JAR,
  LibraryDTO.JSON_PROPERTY_EGG,
  LibraryDTO.JSON_PROPERTY_WHL,
  LibraryDTO.JSON_PROPERTY_PYPI,
  LibraryDTO.JSON_PROPERTY_MAVEN,
  LibraryDTO.JSON_PROPERTY_CRAN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2022-03-10T00:34:34.435-08:00[America/Los_Angeles]")
public class LibraryDTO {
  public static final String JSON_PROPERTY_JAR = "jar";
  @JsonProperty(JSON_PROPERTY_JAR)
  private String jar;

  public static final String JSON_PROPERTY_EGG = "egg";
  @JsonProperty(JSON_PROPERTY_EGG)
  private String egg;

  public static final String JSON_PROPERTY_WHL = "whl";
  @JsonProperty(JSON_PROPERTY_WHL)
  private String whl;

  public static final String JSON_PROPERTY_PYPI = "pypi";
  @JsonProperty(JSON_PROPERTY_PYPI)
  private PythonPyPiLibraryDTO pypi;

  public static final String JSON_PROPERTY_MAVEN = "maven";
  @JsonProperty(JSON_PROPERTY_MAVEN)
  private MavenLibraryDTO maven;

  public static final String JSON_PROPERTY_CRAN = "cran";
  @JsonProperty(JSON_PROPERTY_CRAN)
  private RCranLibraryDTO cran;

  public LibraryDTO jar(String jar) {
    this.jar = jar;
    return this;
  }

  /**
   * If jar, URI of the JAR to be installed. DBFS and ADLS (&#x60;abfss&#x60;) URIs are supported. For example: &#x60;{ \&quot;jar\&quot;: \&quot;dbfs:/mnt/databricks/library.jar\&quot; }&#x60; or &#x60;{ \&quot;jar\&quot;: \&quot;abfss://my-bucket/library.jar\&quot; }&#x60;. If ADLS is used, make sure the cluster has read access on the library.
   * @return jar
   **/
  @JsonProperty(value = "jar")
  public String getJar() {
    return jar;
  }

  public void setJar(String jar) {
    this.jar = jar;
  }

  public LibraryDTO egg(String egg) {
    this.egg = egg;
    return this;
  }

  /**
   * If egg, URI of the egg to be installed. DBFS and ADLS URIs are supported. For example: &#x60;{ \&quot;egg\&quot;: \&quot;dbfs:/my/egg\&quot; }&#x60; or &#x60;{ \&quot;egg\&quot;: \&quot;abfss://my-bucket/egg\&quot; }&#x60;.
   * @return egg
   **/
  @JsonProperty(value = "egg")
  public String getEgg() {
    return egg;
  }

  public void setEgg(String egg) {
    this.egg = egg;
  }

  public LibraryDTO whl(String whl) {
    this.whl = whl;
    return this;
  }

  /**
   * If whl, URI of the wheel or zipped wheels to be installed. DBFS and ADLS URIs are supported. For example: &#x60;{ \&quot;whl\&quot;: \&quot;dbfs:/my/whl\&quot; }&#x60; or &#x60;{ \&quot;whl\&quot;: \&quot;abfss://my-bucket/whl\&quot; }&#x60;. If ADLS is used, make sure the cluster has read access on the library. Also the wheel file name needs to use the [correct convention](https://www.python.org/dev/peps/pep-0427/#file-format). If zipped wheels are to be installed, the file name suffix should be &#x60;.wheelhouse.zip&#x60;.
   * @return whl
   **/
  @JsonProperty(value = "whl")
  public String getWhl() {
    return whl;
  }

  public void setWhl(String whl) {
    this.whl = whl;
  }

  public LibraryDTO pypi(PythonPyPiLibraryDTO pypi) {
    this.pypi = pypi;
    return this;
  }

  /**
   * Get pypi
   * @return pypi
   **/
  @JsonProperty(value = "pypi")
  public PythonPyPiLibraryDTO getPypi() {
    return pypi;
  }

  public void setPypi(PythonPyPiLibraryDTO pypi) {
    this.pypi = pypi;
  }

  public LibraryDTO maven(MavenLibraryDTO maven) {
    this.maven = maven;
    return this;
  }

  /**
   * Get maven
   * @return maven
   **/
  @JsonProperty(value = "maven")
  public MavenLibraryDTO getMaven() {
    return maven;
  }

  public void setMaven(MavenLibraryDTO maven) {
    this.maven = maven;
  }

  public LibraryDTO cran(RCranLibraryDTO cran) {
    this.cran = cran;
    return this;
  }

  /**
   * Get cran
   * @return cran
   **/
  @JsonProperty(value = "cran")
  public RCranLibraryDTO getCran() {
    return cran;
  }

  public void setCran(RCranLibraryDTO cran) {
    this.cran = cran;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryDTO library = (LibraryDTO) o;
    return Objects.equals(this.jar, library.jar) &&
        Objects.equals(this.egg, library.egg) &&
        Objects.equals(this.whl, library.whl) &&
        Objects.equals(this.pypi, library.pypi) &&
        Objects.equals(this.maven, library.maven) &&
        Objects.equals(this.cran, library.cran);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jar, egg, whl, pypi, maven, cran);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryDTO {\n");
    
    sb.append("    jar: ").append(toIndentedString(jar)).append("\n");
    sb.append("    egg: ").append(toIndentedString(egg)).append("\n");
    sb.append("    whl: ").append(toIndentedString(whl)).append("\n");
    sb.append("    pypi: ").append(toIndentedString(pypi)).append("\n");
    sb.append("    maven: ").append(toIndentedString(maven)).append("\n");
    sb.append("    cran: ").append(toIndentedString(cran)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

