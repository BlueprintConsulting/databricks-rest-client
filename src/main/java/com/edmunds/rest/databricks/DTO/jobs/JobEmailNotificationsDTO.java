/*
 * Jobs API 2.1
 * The Jobs API allows you to create, edit, and delete jobs.
 *
 * The version of the OpenAPI document: 2.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.edmunds.rest.databricks.DTO.jobs;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * JobEmailNotificationsDTO
 */
@JsonPropertyOrder({
        JobEmailNotificationsDTO.JSON_PROPERTY_ON_START,
        JobEmailNotificationsDTO.JSON_PROPERTY_ON_SUCCESS,
        JobEmailNotificationsDTO.JSON_PROPERTY_ON_FAILURE,
        JobEmailNotificationsDTO.JSON_PROPERTY_NO_ALERT_FOR_SKIPPED_RUNS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2022-03-09T23:53:34.566-08:00[America/Los_Angeles]")
public class JobEmailNotificationsDTO {
    public static final String JSON_PROPERTY_ON_START = "on_start";
    public static final String JSON_PROPERTY_ON_SUCCESS = "on_success";
    public static final String JSON_PROPERTY_ON_FAILURE = "on_failure";
    public static final String JSON_PROPERTY_NO_ALERT_FOR_SKIPPED_RUNS = "no_alert_for_skipped_runs";
    @JsonProperty(JSON_PROPERTY_ON_START)
    private List<String> onStart = null;
    @JsonProperty(JSON_PROPERTY_ON_SUCCESS)
    private List<String> onSuccess = null;
    @JsonProperty(JSON_PROPERTY_ON_FAILURE)
    private List<String> onFailure = null;
    @JsonProperty(JSON_PROPERTY_NO_ALERT_FOR_SKIPPED_RUNS)
    private Boolean noAlertForSkippedRuns;

    public JobEmailNotificationsDTO onStart(List<String> onStart) {
        this.onStart = onStart;
        return this;
    }

    public JobEmailNotificationsDTO addOnStartItem(String onStartItem) {
        if (this.onStart == null) {
            this.onStart = new ArrayList<String>();
        }
        this.onStart.add(onStartItem);
        return this;
    }

    /**
     * A list of email addresses to be notified when a run begins. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent.
     *
     * @return onStart
     **/
    @JsonProperty(value = "on_start")
    public List<String> getOnStart() {
        return onStart;
    }

    public void setOnStart(List<String> onStart) {
        this.onStart = onStart;
    }

    public JobEmailNotificationsDTO onSuccess(List<String> onSuccess) {
        this.onSuccess = onSuccess;
        return this;
    }

    public JobEmailNotificationsDTO addOnSuccessItem(String onSuccessItem) {
        if (this.onSuccess == null) {
            this.onSuccess = new ArrayList<String>();
        }
        this.onSuccess.add(onSuccessItem);
        return this;
    }

    /**
     * A list of email addresses to be notified when a run successfully completes. A run is considered to have completed successfully if it ends with a &#x60;TERMINATED&#x60; &#x60;life_cycle_state&#x60; and a &#x60;SUCCESSFUL&#x60; result_state. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent.
     *
     * @return onSuccess
     **/
    @JsonProperty(value = "on_success")
    public List<String> getOnSuccess() {
        return onSuccess;
    }

    public void setOnSuccess(List<String> onSuccess) {
        this.onSuccess = onSuccess;
    }

    public JobEmailNotificationsDTO onFailure(List<String> onFailure) {
        this.onFailure = onFailure;
        return this;
    }

    public JobEmailNotificationsDTO addOnFailureItem(String onFailureItem) {
        if (this.onFailure == null) {
            this.onFailure = new ArrayList<String>();
        }
        this.onFailure.add(onFailureItem);
        return this;
    }

    /**
     * A list of email addresses to be notified when a run unsuccessfully completes. A run is considered to have completed unsuccessfully if it ends with an &#x60;INTERNAL_ERROR&#x60; &#x60;life_cycle_state&#x60; or a &#x60;SKIPPED&#x60;, &#x60;FAILED&#x60;, or &#x60;TIMED_OUT&#x60; result_state. If this is not specified on job creation, reset, or update the list is empty, and notifications are not sent.
     *
     * @return onFailure
     **/
    @JsonProperty(value = "on_failure")
    public List<String> getOnFailure() {
        return onFailure;
    }

    public void setOnFailure(List<String> onFailure) {
        this.onFailure = onFailure;
    }

    public JobEmailNotificationsDTO noAlertForSkippedRuns(Boolean noAlertForSkippedRuns) {
        this.noAlertForSkippedRuns = noAlertForSkippedRuns;
        return this;
    }

    /**
     * If true, do not send email to recipients specified in &#x60;on_failure&#x60; if the run is skipped.
     *
     * @return noAlertForSkippedRuns
     **/
    @JsonProperty(value = "no_alert_for_skipped_runs")
    public Boolean getNoAlertForSkippedRuns() {
        return noAlertForSkippedRuns;
    }

    public void setNoAlertForSkippedRuns(Boolean noAlertForSkippedRuns) {
        this.noAlertForSkippedRuns = noAlertForSkippedRuns;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobEmailNotificationsDTO jobEmailNotifications = (JobEmailNotificationsDTO) o;
        return Objects.equals(this.onStart, jobEmailNotifications.onStart) &&
                Objects.equals(this.onSuccess, jobEmailNotifications.onSuccess) &&
                Objects.equals(this.onFailure, jobEmailNotifications.onFailure) &&
                Objects.equals(this.noAlertForSkippedRuns, jobEmailNotifications.noAlertForSkippedRuns);
    }

    @Override
    public int hashCode() {
        return Objects.hash(onStart, onSuccess, onFailure, noAlertForSkippedRuns);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobEmailNotificationsDTO {\n");

        sb.append("    onStart: ").append(toIndentedString(onStart)).append("\n");
        sb.append("    onSuccess: ").append(toIndentedString(onSuccess)).append("\n");
        sb.append("    onFailure: ").append(toIndentedString(onFailure)).append("\n");
        sb.append("    noAlertForSkippedRuns: ").append(toIndentedString(noAlertForSkippedRuns)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

