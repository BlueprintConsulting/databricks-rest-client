/*
 * Jobs API 2.1
 * The Jobs API allows you to create, edit, and delete jobs.
 *
 * The version of the OpenAPI document: 2.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.edmunds.rest.databricks.DTO.jobs;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.Date;
import java.util.Objects;

/**
 * JobTaskDTO
 */
@JsonPropertyOrder({
        JobTaskDTO.JSON_PROPERTY_NOTEBOOK_TASK,
        JobTaskDTO.JSON_PROPERTY_SPARK_JAR_TASK,
        JobTaskDTO.JSON_PROPERTY_SPARK_PYTHON_TASK,
        JobTaskDTO.JSON_PROPERTY_SPARK_SUBMIT_TASK,
        JobTaskDTO.JSON_PROPERTY_PIPELINE_TASK,
        JobTaskDTO.JSON_PROPERTY_PYTHON_WHEEL_TASK
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2022-03-09T23:53:34.566-08:00[America/Los_Angeles]")
public class JobTaskDTO {
    public static final String JSON_PROPERTY_NOTEBOOK_TASK = "notebook_task";
    public static final String JSON_PROPERTY_SPARK_JAR_TASK = "spark_jar_task";
    public static final String JSON_PROPERTY_SPARK_PYTHON_TASK = "spark_python_task";
    public static final String JSON_PROPERTY_SPARK_SUBMIT_TASK = "spark_submit_task";
    public static final String JSON_PROPERTY_PIPELINE_TASK = "pipeline_task";
    public static final String JSON_PROPERTY_PYTHON_WHEEL_TASK = "python_wheel_task";
    @JsonProperty("task_key")
    private String taskKey;
    @JsonProperty(JSON_PROPERTY_NOTEBOOK_TASK)
    private NotebookTaskDTO notebookTask;
    @JsonProperty(JSON_PROPERTY_SPARK_JAR_TASK)
    private SparkJarTaskDTO sparkJarTask;
    @JsonProperty(JSON_PROPERTY_SPARK_PYTHON_TASK)
    private SparkPythonTaskDTO sparkPythonTask;
    @JsonProperty(JSON_PROPERTY_SPARK_SUBMIT_TASK)
    private SparkSubmitTaskDTO sparkSubmitTask;
    @JsonProperty(JSON_PROPERTY_PIPELINE_TASK)
    private PipelineTask pipelineTask;
    @JsonProperty(JSON_PROPERTY_PYTHON_WHEEL_TASK)
    private PythonWheelTask pythonWheelTask;
    @JsonProperty("cluster_instance")
    private ClusterInstanceDTO clusterInstance;
    @JsonProperty("new_cluster")
    private ClusterSpecDTO newCluster;
    @JsonProperty("existing_cluster_id")
    private String existingClusterId;
    @JsonProperty("job_cluster_key")
    private String jobClusterKey;
    @JsonProperty("start_time")
    private Date startTime;
    @JsonProperty("setup_duration")
    private long setupDuration;
    @JsonProperty("execution_duration")
    private long executionDuration;
    @JsonProperty("cleanup_duration")
    private long cleanupDuration;
    @JsonProperty("state")
    private RunStateDTO state;

    @JsonProperty("state")
    public RunStateDTO getState() {
        return state;
    }

    public void setState(RunStateDTO state) {
        this.state = state;
    }

    @JsonProperty("start_time")
    public Date getStartTime() {
        return startTime;
    }

    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }

    @JsonProperty("setup_duration")
    public long getSetupDuration() {
        return setupDuration;
    }

    public void setSetupDuration(long setupDuration) {
        this.setupDuration = setupDuration;
    }

    @JsonProperty("execution_duration")
    public long getExecutionDuration() {
        return executionDuration;
    }

    public void setExecutionDuration(long executionDuration) {
        this.executionDuration = executionDuration;
    }

    @JsonProperty("cleanup_duration")
    public long getCleanupDuration() {
        return cleanupDuration;
    }

    public void setCleanupDuration(long cleanupDuration) {
        this.cleanupDuration = cleanupDuration;
    }

    @JsonProperty("job_cluster_key")
    public String getJobClusterKey() {
        return jobClusterKey;
    }

    public void setJobClusterKey(String jobClusterKey) {
        this.jobClusterKey = jobClusterKey;
    }

    @JsonProperty("existing_cluster_id")
    public String getExistingClusterId() {
        return existingClusterId;
    }

    public void setExistingClusterId(String existingClusterId) {
        this.existingClusterId = existingClusterId;
    }

    @JsonProperty("task_key")
    public String getTaskKey() {
        return taskKey;
    }

    public void setTaskKey(String taskKey) {
        this.taskKey = taskKey;
    }

    public JobTaskDTO notebookTask(NotebookTaskDTO notebookTask) {
        this.notebookTask = notebookTask;
        return this;
    }

    @JsonProperty("cluster_instance")
    public ClusterInstanceDTO getClusterInstance() {
        return clusterInstance;
    }

    public void setClusterInstance(ClusterInstanceDTO clusterInstance) {
        this.clusterInstance = clusterInstance;
    }

    @JsonProperty("new_cluster")
    public ClusterSpecDTO getNewCluster() {
        return newCluster;
    }

    public void setNewCluster(ClusterSpecDTO newCluster) {
        this.newCluster = newCluster;
    }

    /**
     * Get notebookTask
     *
     * @return notebookTask
     **/
    @JsonProperty(value = "notebook_task")
    public NotebookTaskDTO getNotebookTask() {
        return notebookTask;
    }

    public void setNotebookTask(NotebookTaskDTO notebookTask) {
        this.notebookTask = notebookTask;
    }

    public JobTaskDTO sparkJarTask(SparkJarTaskDTO sparkJarTask) {
        this.sparkJarTask = sparkJarTask;
        return this;
    }

    /**
     * Get sparkJarTask
     *
     * @return sparkJarTask
     **/
    @JsonProperty(value = "spark_jar_task")
    public SparkJarTaskDTO getSparkJarTask() {
        return sparkJarTask;
    }

    public void setSparkJarTask(SparkJarTaskDTO sparkJarTask) {
        this.sparkJarTask = sparkJarTask;
    }

    public JobTaskDTO sparkPythonTask(SparkPythonTaskDTO sparkPythonTask) {
        this.sparkPythonTask = sparkPythonTask;
        return this;
    }

    /**
     * Get sparkPythonTask
     *
     * @return sparkPythonTask
     **/
    @JsonProperty(value = "spark_python_task")
    public SparkPythonTaskDTO getSparkPythonTask() {
        return sparkPythonTask;
    }

    public void setSparkPythonTask(SparkPythonTaskDTO sparkPythonTask) {
        this.sparkPythonTask = sparkPythonTask;
    }

    public JobTaskDTO sparkSubmitTask(SparkSubmitTaskDTO sparkSubmitTask) {
        this.sparkSubmitTask = sparkSubmitTask;
        return this;
    }

    /**
     * Get sparkSubmitTask
     *
     * @return sparkSubmitTask
     **/
    @JsonProperty(value = "spark_submit_task")
    public SparkSubmitTaskDTO getSparkSubmitTask() {
        return sparkSubmitTask;
    }

    public void setSparkSubmitTask(SparkSubmitTaskDTO sparkSubmitTask) {
        this.sparkSubmitTask = sparkSubmitTask;
    }

    public JobTaskDTO pipelineTask(PipelineTask pipelineTask) {
        this.pipelineTask = pipelineTask;
        return this;
    }

    /**
     * Get pipelineTask
     *
     * @return pipelineTask
     **/
    @JsonProperty(value = "pipeline_task")
    public PipelineTask getPipelineTask() {
        return pipelineTask;
    }

    public void setPipelineTask(PipelineTask pipelineTask) {
        this.pipelineTask = pipelineTask;
    }

    public JobTaskDTO pythonWheelTask(PythonWheelTask pythonWheelTask) {
        this.pythonWheelTask = pythonWheelTask;
        return this;
    }

    /**
     * Get pythonWheelTask
     *
     * @return pythonWheelTask
     **/
    @JsonProperty(value = "python_wheel_task")
    public PythonWheelTask getPythonWheelTask() {
        return pythonWheelTask;
    }

    public void setPythonWheelTask(PythonWheelTask pythonWheelTask) {
        this.pythonWheelTask = pythonWheelTask;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobTaskDTO jobTask = (JobTaskDTO) o;
        return Objects.equals(this.notebookTask, jobTask.notebookTask) &&
                Objects.equals(this.sparkJarTask, jobTask.sparkJarTask) &&
                Objects.equals(this.sparkPythonTask, jobTask.sparkPythonTask) &&
                Objects.equals(this.sparkSubmitTask, jobTask.sparkSubmitTask) &&
                Objects.equals(this.pipelineTask, jobTask.pipelineTask) &&
                Objects.equals(this.pythonWheelTask, jobTask.pythonWheelTask) &&
                Objects.equals(this.clusterInstance, jobTask.clusterInstance) &&
                Objects.equals(this.newCluster, jobTask.newCluster);
    }

    @Override
    public int hashCode() {
        return Objects.hash(notebookTask, sparkJarTask, sparkPythonTask, sparkSubmitTask, pipelineTask, pythonWheelTask, clusterInstance, newCluster);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobTaskDTO {\n");

        sb.append("    notebookTask: ").append(toIndentedString(notebookTask)).append("\n");
        sb.append("    sparkJarTask: ").append(toIndentedString(sparkJarTask)).append("\n");
        sb.append("    sparkPythonTask: ").append(toIndentedString(sparkPythonTask)).append("\n");
        sb.append("    sparkSubmitTask: ").append(toIndentedString(sparkSubmitTask)).append("\n");
        sb.append("    pipelineTask: ").append(toIndentedString(pipelineTask)).append("\n");
        sb.append("    pythonWheelTask: ").append(toIndentedString(pythonWheelTask)).append("\n");
        sb.append("    clusterInstance: ").append(toIndentedString(clusterInstance)).append("\n");
        sb.append("    newCluster: ").append(toIndentedString(newCluster)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

