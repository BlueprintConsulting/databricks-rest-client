/*
 * Jobs API 2.1
 * The Jobs API allows you to create, edit, and delete jobs.
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.edmunds.rest.databricks.DTO.jobs;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * PythonWheelTask
 */
@JsonPropertyOrder({
  PythonWheelTask.JSON_PROPERTY_PACKAGE_NAME,
  PythonWheelTask.JSON_PROPERTY_ENTRY_POINT,
  PythonWheelTask.JSON_PROPERTY_PARAMETERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2022-03-10T00:34:34.435-08:00[America/Los_Angeles]")
public class PythonWheelTask   {
  public static final String JSON_PROPERTY_PACKAGE_NAME = "package_name";
  @JsonProperty(JSON_PROPERTY_PACKAGE_NAME)
  private String packageName;

  public static final String JSON_PROPERTY_ENTRY_POINT = "entry_point";
  @JsonProperty(JSON_PROPERTY_ENTRY_POINT)
  private String entryPoint;

  public static final String JSON_PROPERTY_PARAMETERS = "parameters";
  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  private List<String> parameters = null;

  public PythonWheelTask packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Name of the package to execute
   * @return packageName
   **/
  @JsonProperty(value = "package_name")

  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }

  public PythonWheelTask entryPoint(String entryPoint) {
    this.entryPoint = entryPoint;
    return this;
  }

  /**
   * Named entry point to use, if it does not exist in the metadata of the package it executes the function from the package directly using $packageName.$entryPoint()
   * @return entryPoint
   **/
  @JsonProperty(value = "entry_point")

  public String getEntryPoint() {
    return entryPoint;
  }

  public void setEntryPoint(String entryPoint) {
    this.entryPoint = entryPoint;
  }

  public PythonWheelTask parameters(List<String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public PythonWheelTask addParametersItem(String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<String>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Command-line parameters passed to python wheel task.
   * @return parameters
   **/
  @JsonProperty(value = "parameters")

  public List<String> getParameters() {
    return parameters;
  }

  public void setParameters(List<String> parameters) {
    this.parameters = parameters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PythonWheelTask pythonWheelTask = (PythonWheelTask) o;
    return Objects.equals(this.packageName, pythonWheelTask.packageName) &&
        Objects.equals(this.entryPoint, pythonWheelTask.entryPoint) &&
        Objects.equals(this.parameters, pythonWheelTask.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(packageName, entryPoint, parameters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PythonWheelTask {\n");
    
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    entryPoint: ").append(toIndentedString(entryPoint)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

