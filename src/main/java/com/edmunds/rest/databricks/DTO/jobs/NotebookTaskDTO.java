/*
 * Jobs API 2.1
 * The Jobs API allows you to create, edit, and delete jobs.
 *
 * The version of the OpenAPI document: 2.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.edmunds.rest.databricks.DTO.jobs;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * NotebookTaskDTO
 */
@JsonPropertyOrder({
        NotebookTaskDTO.JSON_PROPERTY_NOTEBOOK_PATH,
        NotebookTaskDTO.JSON_PROPERTY_BASE_PARAMETERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2022-03-09T23:53:34.566-08:00[America/Los_Angeles]")
public class NotebookTaskDTO {
    public static final String JSON_PROPERTY_NOTEBOOK_PATH = "notebook_path";
    public static final String JSON_PROPERTY_BASE_PARAMETERS = "base_parameters";
    @JsonProperty(JSON_PROPERTY_NOTEBOOK_PATH)
    private String notebookPath;
    @JsonProperty(JSON_PROPERTY_BASE_PARAMETERS)
    private Map<String, Object> baseParameters = null;

    public NotebookTaskDTO notebookPath(String notebookPath) {
        this.notebookPath = notebookPath;
        return this;
    }

    /**
     * The absolute path of the notebook to be run in the Azure Databricks workspace. This path must begin with a slash. This field is required.
     *
     * @return notebookPath
     **/
    @JsonProperty(value = "notebook_path")

    public String getNotebookPath() {
        return notebookPath;
    }

    public void setNotebookPath(String notebookPath) {
        this.notebookPath = notebookPath;
    }

    public NotebookTaskDTO baseParameters(Map<String, Object> baseParameters) {
        this.baseParameters = baseParameters;
        return this;
    }

    public NotebookTaskDTO putBaseParametersItem(String key, Object baseParametersItem) {
        if (this.baseParameters == null) {
            this.baseParameters = new HashMap<String, Object>();
        }
        this.baseParameters.put(key, baseParametersItem);
        return this;
    }

    /**
     * Base parameters to be used for each run of this job. If the run is initiated by a call to [&#x60;run-now&#x60;](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/jobs#operation/JobsRunNow) with parameters specified, the two parameters maps are merged. If the same key is specified in &#x60;base_parameters&#x60; and in &#x60;run-now&#x60;, the value from &#x60;run-now&#x60; is used.  Use [Task parameter variables](https://docs.microsoft.com/azure/databricks/jobs#parameter-variables) to set parameters containing information about job runs.  If the notebook takes a parameter that is not specified in the jobâ€™s &#x60;base_parameters&#x60; or the &#x60;run-now&#x60; override parameters, the default value from the notebook is used.  Retrieve these parameters in a notebook using [dbutils.widgets.get](https://docs.microsoft.com/azure/databricks/dev-tools/databricks-utils#dbutils-widgets).
     *
     * @return baseParameters
     **/
    @JsonProperty(value = "base_parameters")

    public Map<String, Object> getBaseParameters() {
        return baseParameters;
    }

    public void setBaseParameters(Map<String, Object> baseParameters) {
        this.baseParameters = baseParameters;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotebookTaskDTO notebookTask = (NotebookTaskDTO) o;
        return Objects.equals(this.notebookPath, notebookTask.notebookPath) &&
                Objects.equals(this.baseParameters, notebookTask.baseParameters);
    }

    @Override
    public int hashCode() {
        return Objects.hash(notebookPath, baseParameters);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NotebookTaskDTO {\n");

        sb.append("    notebookPath: ").append(toIndentedString(notebookPath)).append("\n");
        sb.append("    baseParameters: ").append(toIndentedString(baseParameters)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

